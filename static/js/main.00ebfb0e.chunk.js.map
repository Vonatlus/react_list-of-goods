{"version":3,"sources":["List.tsx","App.tsx","index.tsx"],"names":["List","React","memo","goods","map","good","goodsFromServer","App","state","isVisible","getIsVisible","setState","reverse","sortAlphabetically","sort","a","b","localeCompare","reset","sortByLength","length","this","className","type","onClick","Component","ReactDOM","render","document","getElementById"],"mappings":"mPAMaA,EAAwBC,IAAMC,MACzC,YAAgB,IAAbC,EAAY,EAAZA,MACD,OACE,6BACGA,EAAMC,KAAI,SAAAC,GAAI,OACb,6BAAgBA,GAAPA,WCPbC,EAA4B,CAChC,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAQIC,E,4MACJC,MAAe,CACbC,WAAW,EACXN,MAAM,GAAD,OAAMG,I,EAGbI,aAAe,WACb,EAAKC,UAAS,SAAAH,GAAK,MAAK,CACtBC,WAAYD,EAAMC,e,EAItBG,QAAU,WACR,EAAKD,UAAS,SAAAH,GAAK,MACjB,CAAEL,MAAO,YAAIK,EAAML,OAAOS,e,EAI9BC,mBAAqB,WACnB,EAAKF,UAAS,SAAAH,GAAK,MACjB,CAAEL,MAAO,YAAIK,EAAML,OAAOW,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,cAAcD,W,EAI7DE,MAAQ,WACN,EAAKP,SACH,CAAER,MAAM,GAAD,OAAMG,M,EAIjBa,aAAe,WACb,EAAKR,UAAS,SAAAH,GAAK,MACjB,CAAEL,MAAO,YAAIK,EAAML,OAAOW,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEK,OAASJ,EAAEI,e,4CAI1D,WACE,MAA6BC,KAAKb,MAA1BC,EAAR,EAAQA,UAAWN,EAAnB,EAAmBA,MAEnB,OACE,sBAAKmB,UAAU,MAAf,WACIb,GACG,wBAAQc,KAAK,SAASC,QAASH,KAAKX,aAApC,mBACJD,GAEG,gCACE,cAACT,EAAD,CAAMG,MAAOA,IACb,wBACEoB,KAAK,SACLC,QAASH,KAAKT,QAFhB,qBAMA,wBACEW,KAAK,SACLC,QAASH,KAAKR,mBAFhB,iCAMA,wBACEU,KAAK,SACLC,QAASH,KAAKH,MAFhB,mBAMA,wBACEK,KAAK,SACLC,QAASH,KAAKF,aAFhB,sC,GAjEIlB,IAAMwB,WA8ETlB,ICjGfmB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.00ebfb0e.chunk.js","sourcesContent":["import React from 'react';\n\ntype Props = {\n  goods: string[]\n};\n\nexport const List: React.FC<Props> = React.memo(\n  ({ goods }) => {\n    return (\n      <ul>\n        {goods.map(good => (\n          <li key={good}>{good}</li>\n        ))}\n      </ul>\n    );\n  },\n);\n","import React from 'react';\nimport './App.css';\nimport { List } from './List';\n\nconst goodsFromServer: string[] = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\ntype State = {\n  isVisible: boolean\n  goods: string[]\n};\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    isVisible: false,\n    goods: [...goodsFromServer],\n  };\n\n  getIsVisible = () => {\n    this.setState(state => ({\n      isVisible: !state.isVisible,\n    }));\n  };\n\n  reverse = () => {\n    this.setState(state => (\n      { goods: [...state.goods].reverse() }\n    ));\n  };\n\n  sortAlphabetically = () => {\n    this.setState(state => (\n      { goods: [...state.goods].sort((a, b) => a.localeCompare(b)) }\n    ));\n  };\n\n  reset = () => {\n    this.setState((\n      { goods: [...goodsFromServer] }\n    ));\n  };\n\n  sortByLength = () => {\n    this.setState(state => (\n      { goods: [...state.goods].sort((a, b) => a.length - b.length) }\n    ));\n  };\n\n  render(): React.ReactNode {\n    const { isVisible, goods } = this.state;\n\n    return (\n      <div className=\"App\">\n        {!isVisible\n          && <button type=\"button\" onClick={this.getIsVisible}>Start</button>}\n        {isVisible\n          && (\n            <div>\n              <List goods={goods} />\n              <button\n                type=\"button\"\n                onClick={this.reverse}\n              >\n                Reverse\n              </button>\n              <button\n                type=\"button\"\n                onClick={this.sortAlphabetically}\n              >\n                Sort alphabetically\n              </button>\n              <button\n                type=\"button\"\n                onClick={this.reset}\n              >\n                Reset\n              </button>\n              <button\n                type=\"button\"\n                onClick={this.sortByLength}\n              >\n                Sort by length\n              </button>\n            </div>\n          )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}